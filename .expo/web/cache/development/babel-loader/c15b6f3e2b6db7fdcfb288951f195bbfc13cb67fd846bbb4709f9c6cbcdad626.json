{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createPerformanceLogger;\nexports.getCurrentTimestamp = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar Systrace = _interopRequireWildcard(require(\"../Performance/Systrace\"));\nvar _ReactNativeFeatureFlags = _interopRequireDefault(require(\"../ReactNative/ReactNativeFeatureFlags\"));\nvar _NativePerformance = _interopRequireDefault(require(\"../WebPerformance/NativePerformance\"));\nvar _infoLog = _interopRequireDefault(require(\"./infoLog\"));\nvar _global$nativeQPLTime;\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nvar _cookies = {};\nvar PRINT_TO_CONSOLE = false;\nvar WEB_PERFORMANCE_PREFIX = 'global_perf_';\nvar getCurrentTimestamp = exports.getCurrentTimestamp = (_global$nativeQPLTime = global.nativeQPLTimestamp) != null ? _global$nativeQPLTime : function () {\n  return global.performance.now();\n};\nvar PerformanceLogger = function () {\n  function PerformanceLogger(isGlobalLogger) {\n    (0, _classCallCheck2.default)(this, PerformanceLogger);\n    this._timespans = {};\n    this._extras = {};\n    this._points = {};\n    this._pointExtras = {};\n    this._closed = false;\n    this._isGlobalLogger = false;\n    this._isGlobalLogger = isGlobalLogger === true;\n  }\n  (0, _createClass2.default)(PerformanceLogger, [{\n    key: \"_isLoggingForWebPerformance\",\n    value: function _isLoggingForWebPerformance() {\n      if (!this._isGlobalLogger || _NativePerformance.default == null) {\n        return false;\n      }\n      if (this._isGlobalWebPerformanceLoggerEnabled == null) {\n        this._isGlobalWebPerformanceLoggerEnabled = _ReactNativeFeatureFlags.default.isGlobalWebPerformanceLoggerEnabled();\n      }\n      return this._isGlobalWebPerformanceLoggerEnabled === true;\n    }\n  }, {\n    key: \"_performanceMark\",\n    value: function _performanceMark(key, startTime) {\n      if (this._isLoggingForWebPerformance()) {\n        var _global$performance;\n        (_global$performance = global.performance) == null ? void 0 : _global$performance.mark == null ? void 0 : _global$performance.mark(key, {\n          startTime: startTime\n        });\n      }\n    }\n  }, {\n    key: \"_performanceMeasure\",\n    value: function _performanceMeasure(key, start, end) {\n      if (this._isLoggingForWebPerformance()) {\n        var _global$performance2;\n        (_global$performance2 = global.performance) == null ? void 0 : _global$performance2.measure == null ? void 0 : _global$performance2.measure(key, {\n          start: start,\n          end: end\n        });\n      }\n    }\n  }, {\n    key: \"addTimespan\",\n    value: function addTimespan(key, startTime, endTime, startExtras, endExtras) {\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: addTimespan - has closed ignoring: ', key);\n        }\n        return;\n      }\n      if (this._timespans[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: Attempting to add a timespan that already exists ', key);\n        }\n        return;\n      }\n      this._timespans[key] = {\n        startTime: startTime,\n        endTime: endTime,\n        totalTime: endTime - (startTime || 0),\n        startExtras: startExtras,\n        endExtras: endExtras\n      };\n      this._performanceMeasure(`${WEB_PERFORMANCE_PREFIX}_${key}`, startTime, endTime);\n    }\n  }, {\n    key: \"append\",\n    value: function append(performanceLogger) {\n      this._timespans = Object.assign({}, performanceLogger.getTimespans(), this._timespans);\n      this._extras = Object.assign({}, performanceLogger.getExtras(), this._extras);\n      this._points = Object.assign({}, performanceLogger.getPoints(), this._points);\n      this._pointExtras = Object.assign({}, performanceLogger.getPointExtras(), this._pointExtras);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._timespans = {};\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        (0, _infoLog.default)('PerformanceLogger.js', 'clear');\n      }\n    }\n  }, {\n    key: \"clearCompleted\",\n    value: function clearCompleted() {\n      for (var _key in this._timespans) {\n        var _this$_timespans$_key;\n        if (((_this$_timespans$_key = this._timespans[_key]) == null ? void 0 : _this$_timespans$_key.totalTime) != null) {\n          delete this._timespans[_key];\n        }\n      }\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        (0, _infoLog.default)('PerformanceLogger.js', 'clearCompleted');\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._closed = true;\n    }\n  }, {\n    key: \"currentTimestamp\",\n    value: function currentTimestamp() {\n      return getCurrentTimestamp();\n    }\n  }, {\n    key: \"getExtras\",\n    value: function getExtras() {\n      return this._extras;\n    }\n  }, {\n    key: \"getPoints\",\n    value: function getPoints() {\n      return this._points;\n    }\n  }, {\n    key: \"getPointExtras\",\n    value: function getPointExtras() {\n      return this._pointExtras;\n    }\n  }, {\n    key: \"getTimespans\",\n    value: function getTimespans() {\n      return this._timespans;\n    }\n  }, {\n    key: \"hasTimespan\",\n    value: function hasTimespan(key) {\n      return !!this._timespans[key];\n    }\n  }, {\n    key: \"isClosed\",\n    value: function isClosed() {\n      return this._closed;\n    }\n  }, {\n    key: \"logEverything\",\n    value: function logEverything() {\n      if (PRINT_TO_CONSOLE) {\n        for (var _key2 in this._timespans) {\n          var _this$_timespans$_key2;\n          if (((_this$_timespans$_key2 = this._timespans[_key2]) == null ? void 0 : _this$_timespans$_key2.totalTime) != null) {\n            (0, _infoLog.default)(_key2 + ': ' + this._timespans[_key2].totalTime + 'ms');\n          }\n        }\n        (0, _infoLog.default)(this._extras);\n        for (var _key3 in this._points) {\n          if (this._points[_key3] != null) {\n            (0, _infoLog.default)(_key3 + ': ' + this._points[_key3] + 'ms');\n          }\n        }\n      }\n    }\n  }, {\n    key: \"markPoint\",\n    value: function markPoint(key) {\n      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();\n      var extras = arguments.length > 2 ? arguments[2] : undefined;\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: markPoint - has closed ignoring: ', key);\n        }\n        return;\n      }\n      if (this._points[key] != null) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: Attempting to mark a point that has been already logged ', key);\n        }\n        return;\n      }\n      this._points[key] = timestamp;\n      if (extras) {\n        this._pointExtras[key] = extras;\n      }\n      this._performanceMark(`${WEB_PERFORMANCE_PREFIX}_${key}`, timestamp);\n    }\n  }, {\n    key: \"removeExtra\",\n    value: function removeExtra(key) {\n      var value = this._extras[key];\n      delete this._extras[key];\n      return value;\n    }\n  }, {\n    key: \"setExtra\",\n    value: function setExtra(key, value) {\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: setExtra - has closed ignoring: ', key);\n        }\n        return;\n      }\n      if (this._extras.hasOwnProperty(key)) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: Attempting to set an extra that already exists ', {\n            key: key,\n            currentValue: this._extras[key],\n            attemptedValue: value\n          });\n        }\n        return;\n      }\n      this._extras[key] = value;\n    }\n  }, {\n    key: \"startTimespan\",\n    value: function startTimespan(key) {\n      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();\n      var extras = arguments.length > 2 ? arguments[2] : undefined;\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: startTimespan - has closed ignoring: ', key);\n        }\n        return;\n      }\n      if (this._timespans[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: Attempting to start a timespan that already exists ', key);\n        }\n        return;\n      }\n      this._timespans[key] = {\n        startTime: timestamp,\n        startExtras: extras\n      };\n      _cookies[key] = Systrace.beginAsyncEvent(key);\n      if (PRINT_TO_CONSOLE) {\n        (0, _infoLog.default)('PerformanceLogger.js', 'start: ' + key);\n      }\n      this._performanceMark(`${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`, timestamp);\n    }\n  }, {\n    key: \"stopTimespan\",\n    value: function stopTimespan(key) {\n      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();\n      var extras = arguments.length > 2 ? arguments[2] : undefined;\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: stopTimespan - has closed ignoring: ', key);\n        }\n        return;\n      }\n      var timespan = this._timespans[key];\n      if (!timespan || timespan.startTime == null) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: Attempting to end a timespan that has not started ', key);\n        }\n        return;\n      }\n      if (timespan.endTime != null) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: Attempting to end a timespan that has already ended ', key);\n        }\n        return;\n      }\n      timespan.endExtras = extras;\n      timespan.endTime = timestamp;\n      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n      if (PRINT_TO_CONSOLE) {\n        (0, _infoLog.default)('PerformanceLogger.js', 'end: ' + key);\n      }\n      if (_cookies[key] != null) {\n        Systrace.endAsyncEvent(key, _cookies[key]);\n        delete _cookies[key];\n      }\n      this._performanceMeasure(`${WEB_PERFORMANCE_PREFIX}_${key}`, `${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`, timestamp);\n    }\n  }]);\n  return PerformanceLogger;\n}();\nfunction createPerformanceLogger(isGlobalLogger) {\n  return new PerformanceLogger(isGlobalLogger);\n}","map":{"version":3,"names":["Systrace","_interopRequireWildcard","require","_ReactNativeFeatureFlags","_interopRequireDefault","_NativePerformance","_infoLog","_global$nativeQPLTime","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_cookies","PRINT_TO_CONSOLE","WEB_PERFORMANCE_PREFIX","getCurrentTimestamp","exports","global","nativeQPLTimestamp","performance","now","PerformanceLogger","isGlobalLogger","_classCallCheck2","_timespans","_extras","_points","_pointExtras","_closed","_isGlobalLogger","_createClass2","key","value","_isLoggingForWebPerformance","NativePerformance","_isGlobalWebPerformanceLoggerEnabled","ReactNativeFeatureFlags","isGlobalWebPerformanceLoggerEnabled","_performanceMark","startTime","_global$performance","mark","_performanceMeasure","start","end","_global$performance2","measure","addTimespan","endTime","startExtras","endExtras","__DEV__","infoLog","totalTime","append","performanceLogger","assign","getTimespans","getExtras","getPoints","getPointExtras","clear","clearCompleted","_this$_timespans$_key","close","currentTimestamp","hasTimespan","isClosed","logEverything","_this$_timespans$_key2","markPoint","timestamp","arguments","length","undefined","extras","removeExtra","setExtra","currentValue","attemptedValue","startTimespan","beginAsyncEvent","stopTimespan","timespan","endAsyncEvent","createPerformanceLogger"],"sources":["D:/IT/react native/crud_project/node_modules/react-native/Libraries/Utilities/createPerformanceLogger.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {\n  Extras,\n  ExtraValue,\n  IPerformanceLogger,\n  Timespan,\n} from './IPerformanceLogger';\n\nimport * as Systrace from '../Performance/Systrace';\nimport ReactNativeFeatureFlags from '../ReactNative/ReactNativeFeatureFlags';\nimport NativePerformance from '../WebPerformance/NativePerformance';\nimport infoLog from './infoLog';\n\nconst _cookies: {[key: string]: number, ...} = {};\n\nconst PRINT_TO_CONSOLE: false = false; // Type as false to prevent accidentally committing `true`;\n\n// This is the prefix for optional logging points/timespans as marks/measures via Performance API,\n// used to separate these internally from other marks/measures\nconst WEB_PERFORMANCE_PREFIX = 'global_perf_';\n\nexport const getCurrentTimestamp: () => number =\n  global.nativeQPLTimestamp ?? (() => global.performance.now());\n\nclass PerformanceLogger implements IPerformanceLogger {\n  _timespans: {[key: string]: ?Timespan} = {};\n  _extras: {[key: string]: ?ExtraValue} = {};\n  _points: {[key: string]: ?number} = {};\n  _pointExtras: {[key: string]: ?Extras, ...} = {};\n  _closed: boolean = false;\n  _isGlobalLogger: boolean = false;\n  _isGlobalWebPerformanceLoggerEnabled: ?boolean;\n\n  constructor(isGlobalLogger?: boolean) {\n    this._isGlobalLogger = isGlobalLogger === true;\n  }\n\n  _isLoggingForWebPerformance(): boolean {\n    if (!this._isGlobalLogger || NativePerformance == null) {\n      return false;\n    }\n    if (this._isGlobalWebPerformanceLoggerEnabled == null) {\n      this._isGlobalWebPerformanceLoggerEnabled =\n        ReactNativeFeatureFlags.isGlobalWebPerformanceLoggerEnabled();\n    }\n    return this._isGlobalWebPerformanceLoggerEnabled === true;\n  }\n\n  // NOTE: The Performance.mark/measure calls are wrapped here to ensure that\n  // we are safe from the cases when the global 'peformance' object is still not yet defined.\n  // It is only necessary in this file because of potential race conditions in the initialization\n  // order between 'createPerformanceLogger' and 'setUpPerformance'.\n  //\n  // In most of the other cases this kind of check for `performance` being defined\n  // wouldn't be necessary.\n  _performanceMark(key: string, startTime: number) {\n    if (this._isLoggingForWebPerformance()) {\n      global.performance?.mark?.(key, {\n        startTime,\n      });\n    }\n  }\n\n  _performanceMeasure(\n    key: string,\n    start: number | string,\n    end: number | string,\n  ) {\n    if (this._isLoggingForWebPerformance()) {\n      global.performance?.measure?.(key, {\n        start,\n        end,\n      });\n    }\n  }\n\n  addTimespan(\n    key: string,\n    startTime: number,\n    endTime: number,\n    startExtras?: Extras,\n    endExtras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: addTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._timespans[key]) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to add a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    this._timespans[key] = {\n      startTime,\n      endTime,\n      totalTime: endTime - (startTime || 0),\n      startExtras,\n      endExtras,\n    };\n\n    this._performanceMeasure(\n      `${WEB_PERFORMANCE_PREFIX}_${key}`,\n      startTime,\n      endTime,\n    );\n  }\n\n  append(performanceLogger: IPerformanceLogger) {\n    this._timespans = {\n      ...performanceLogger.getTimespans(),\n      ...this._timespans,\n    };\n    this._extras = {...performanceLogger.getExtras(), ...this._extras};\n    this._points = {...performanceLogger.getPoints(), ...this._points};\n    this._pointExtras = {\n      ...performanceLogger.getPointExtras(),\n      ...this._pointExtras,\n    };\n  }\n\n  clear() {\n    this._timespans = {};\n    this._extras = {};\n    this._points = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clear');\n    }\n  }\n\n  clearCompleted() {\n    for (const key in this._timespans) {\n      if (this._timespans[key]?.totalTime != null) {\n        delete this._timespans[key];\n      }\n    }\n    this._extras = {};\n    this._points = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clearCompleted');\n    }\n  }\n\n  close() {\n    this._closed = true;\n  }\n\n  currentTimestamp(): number {\n    return getCurrentTimestamp();\n  }\n\n  getExtras(): {[key: string]: ?ExtraValue} {\n    return this._extras;\n  }\n\n  getPoints(): {[key: string]: ?number} {\n    return this._points;\n  }\n\n  getPointExtras(): {[key: string]: ?Extras} {\n    return this._pointExtras;\n  }\n\n  getTimespans(): {[key: string]: ?Timespan} {\n    return this._timespans;\n  }\n\n  hasTimespan(key: string): boolean {\n    return !!this._timespans[key];\n  }\n\n  isClosed(): boolean {\n    return this._closed;\n  }\n\n  logEverything() {\n    if (PRINT_TO_CONSOLE) {\n      // log timespans\n      for (const key in this._timespans) {\n        if (this._timespans[key]?.totalTime != null) {\n          infoLog(key + ': ' + this._timespans[key].totalTime + 'ms');\n        }\n      }\n\n      // log extras\n      infoLog(this._extras);\n\n      // log points\n      for (const key in this._points) {\n        if (this._points[key] != null) {\n          infoLog(key + ': ' + this._points[key] + 'ms');\n        }\n      }\n    }\n  }\n\n  markPoint(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: markPoint - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._points[key] != null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to mark a point that has been already logged ',\n          key,\n        );\n      }\n      return;\n    }\n    this._points[key] = timestamp;\n    if (extras) {\n      this._pointExtras[key] = extras;\n    }\n\n    this._performanceMark(`${WEB_PERFORMANCE_PREFIX}_${key}`, timestamp);\n  }\n\n  removeExtra(key: string): ?ExtraValue {\n    const value = this._extras[key];\n    delete this._extras[key];\n    return value;\n  }\n\n  setExtra(key: string, value: ExtraValue) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: setExtra - has closed ignoring: ', key);\n      }\n      return;\n    }\n\n    if (this._extras.hasOwnProperty(key)) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to set an extra that already exists ',\n          {key, currentValue: this._extras[key], attemptedValue: value},\n        );\n      }\n      return;\n    }\n    this._extras[key] = value;\n  }\n\n  startTimespan(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: startTimespan - has closed ignoring: ',\n          key,\n        );\n      }\n      return;\n    }\n\n    if (this._timespans[key]) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to start a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    this._timespans[key] = {\n      startTime: timestamp,\n      startExtras: extras,\n    };\n    _cookies[key] = Systrace.beginAsyncEvent(key);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'start: ' + key);\n    }\n\n    this._performanceMark(\n      `${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`,\n      timestamp,\n    );\n  }\n\n  stopTimespan(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: stopTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n\n    const timespan = this._timespans[key];\n    if (!timespan || timespan.startTime == null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has not started ',\n          key,\n        );\n      }\n      return;\n    }\n    if (timespan.endTime != null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has already ended ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespan.endExtras = extras;\n    timespan.endTime = timestamp;\n    timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'end: ' + key);\n    }\n\n    if (_cookies[key] != null) {\n      Systrace.endAsyncEvent(key, _cookies[key]);\n      delete _cookies[key];\n    }\n\n    this._performanceMeasure(\n      `${WEB_PERFORMANCE_PREFIX}_${key}`,\n      `${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`,\n      timestamp,\n    );\n  }\n}\n\n// Re-exporting for backwards compatibility with all the clients that\n// may still import it from this module.\nexport type {Extras, ExtraValue, IPerformanceLogger, Timespan};\n\n/**\n * This function creates performance loggers that can be used to collect and log\n * various performance data such as timespans, points and extras.\n * The loggers need to have minimal overhead since they're used in production.\n */\nexport default function createPerformanceLogger(\n  isGlobalLogger?: boolean,\n): IPerformanceLogger {\n  return new PerformanceLogger(isGlobalLogger);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}