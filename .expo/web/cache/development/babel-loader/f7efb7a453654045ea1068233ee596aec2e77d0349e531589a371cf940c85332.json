{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.get = get;\nexports.getWithFallback_DEPRECATED = getWithFallback_DEPRECATED;\nexports.setRuntimeConfigProvider = setRuntimeConfigProvider;\nexports.unstable_hasStaticViewConfig = unstable_hasStaticViewConfig;\nvar _getNativeComponentAttributes = _interopRequireDefault(require(\"../ReactNative/getNativeComponentAttributes\"));\nvar _UIManager = _interopRequireDefault(require(\"../ReactNative/UIManager\"));\nvar _ReactNativeViewConfigRegistry = _interopRequireDefault(require(\"../Renderer/shims/ReactNativeViewConfigRegistry\"));\nvar _verifyComponentAttributeEquivalence = _interopRequireDefault(require(\"../Utilities/verifyComponentAttributeEquivalence\"));\nvar StaticViewConfigValidator = _interopRequireWildcard(require(\"./StaticViewConfigValidator\"));\nvar _ViewConfig = require(\"./ViewConfig\");\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nvar getRuntimeConfig;\nfunction setRuntimeConfigProvider(runtimeConfigProvider) {\n  if (getRuntimeConfig === undefined) {\n    getRuntimeConfig = runtimeConfigProvider;\n  }\n}\nfunction get(name, viewConfigProvider) {\n  _ReactNativeViewConfigRegistry.default.register(name, function () {\n    var _getRuntimeConfig;\n    var _ref = (_getRuntimeConfig = getRuntimeConfig == null ? void 0 : getRuntimeConfig(name)) != null ? _getRuntimeConfig : {\n        native: !global.RN$Bridgeless,\n        strict: false,\n        verify: false\n      },\n      native = _ref.native,\n      strict = _ref.strict,\n      verify = _ref.verify;\n    var viewConfig;\n    if (native) {\n      viewConfig = (0, _getNativeComponentAttributes.default)(name);\n    } else {\n      viewConfig = (0, _ViewConfig.createViewConfig)(viewConfigProvider());\n      if (viewConfig == null) {\n        viewConfig = (0, _getNativeComponentAttributes.default)(name);\n      }\n    }\n    if (verify) {\n      var nativeViewConfig = native ? viewConfig : (0, _getNativeComponentAttributes.default)(name);\n      var staticViewConfig = native ? (0, _ViewConfig.createViewConfig)(viewConfigProvider()) : viewConfig;\n      if (strict) {\n        var validationOutput = StaticViewConfigValidator.validate(name, nativeViewConfig, staticViewConfig);\n        if (validationOutput.type === 'invalid') {\n          console.error(StaticViewConfigValidator.stringifyValidationResult(name, validationOutput));\n        }\n      } else {\n        (0, _verifyComponentAttributeEquivalence.default)(nativeViewConfig, staticViewConfig);\n      }\n    }\n    return viewConfig;\n  });\n  return name;\n}\nfunction getWithFallback_DEPRECATED(name, viewConfigProvider) {\n  if (getRuntimeConfig == null) {\n    if (hasNativeViewConfig(name)) {\n      return get(name, viewConfigProvider);\n    }\n  } else {\n    if (getRuntimeConfig(name) != null) {\n      return get(name, viewConfigProvider);\n    }\n  }\n  var FallbackNativeComponent = function FallbackNativeComponent(props) {\n    return null;\n  };\n  FallbackNativeComponent.displayName = `Fallback(${name})`;\n  return FallbackNativeComponent;\n}\nfunction hasNativeViewConfig(name) {\n  (0, _invariant.default)(getRuntimeConfig == null, 'Unexpected invocation!');\n  return _UIManager.default.getViewManagerConfig(name) != null;\n}\nfunction unstable_hasStaticViewConfig(name) {\n  var _getRuntimeConfig2;\n  var _ref2 = (_getRuntimeConfig2 = getRuntimeConfig == null ? void 0 : getRuntimeConfig(name)) != null ? _getRuntimeConfig2 : {\n      native: true\n    },\n    native = _ref2.native;\n  return !native;\n}","map":{"version":3,"names":["_getNativeComponentAttributes","_interopRequireDefault","require","_UIManager","_ReactNativeViewConfigRegistry","_verifyComponentAttributeEquivalence","StaticViewConfigValidator","_interopRequireWildcard","_ViewConfig","_invariant","React","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","getRuntimeConfig","setRuntimeConfigProvider","runtimeConfigProvider","undefined","name","viewConfigProvider","ReactNativeViewConfigRegistry","register","_getRuntimeConfig","_ref","native","global","RN$Bridgeless","strict","verify","viewConfig","getNativeComponentAttributes","createViewConfig","nativeViewConfig","staticViewConfig","validationOutput","validate","type","console","error","stringifyValidationResult","verifyComponentAttributeEquivalence","getWithFallback_DEPRECATED","hasNativeViewConfig","FallbackNativeComponent","props","displayName","invariant","UIManager","getViewManagerConfig","unstable_hasStaticViewConfig","_getRuntimeConfig2","_ref2"],"sources":["D:/IT/react native/crud_project/node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {\n  HostComponent,\n  PartialViewConfig,\n} from '../Renderer/shims/ReactNativeTypes';\n\nimport getNativeComponentAttributes from '../ReactNative/getNativeComponentAttributes';\nimport UIManager from '../ReactNative/UIManager';\nimport ReactNativeViewConfigRegistry from '../Renderer/shims/ReactNativeViewConfigRegistry';\nimport verifyComponentAttributeEquivalence from '../Utilities/verifyComponentAttributeEquivalence';\nimport * as StaticViewConfigValidator from './StaticViewConfigValidator';\nimport {createViewConfig} from './ViewConfig';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\nlet getRuntimeConfig;\n\n/**\n * Configures a function that is called to determine whether a given component\n * should be registered using reflection of the native component at runtime.\n *\n * The provider should return null if the native component is unavailable in\n * the current environment.\n */\nexport function setRuntimeConfigProvider(\n  runtimeConfigProvider: (name: string) => ?{\n    native: boolean,\n    strict: boolean,\n    verify: boolean,\n  },\n): void {\n  if (getRuntimeConfig === undefined) {\n    getRuntimeConfig = runtimeConfigProvider;\n  }\n}\n\n/**\n * Gets a `NativeComponent` that can be rendered by React Native.\n *\n * The supplied `viewConfigProvider` may or may not be invoked and utilized,\n * depending on how `setRuntimeConfigProvider` is configured.\n */\nexport function get<Config>(\n  name: string,\n  viewConfigProvider: () => PartialViewConfig,\n): HostComponent<Config> {\n  ReactNativeViewConfigRegistry.register(name, () => {\n    const {native, strict, verify} = getRuntimeConfig?.(name) ?? {\n      native: !global.RN$Bridgeless,\n      strict: false,\n      verify: false,\n    };\n\n    let viewConfig;\n    if (native) {\n      viewConfig = getNativeComponentAttributes(name);\n    } else {\n      viewConfig = createViewConfig(viewConfigProvider());\n      if (viewConfig == null) {\n        viewConfig = getNativeComponentAttributes(name);\n      }\n    }\n\n    if (verify) {\n      const nativeViewConfig = native\n        ? viewConfig\n        : getNativeComponentAttributes(name);\n      const staticViewConfig = native\n        ? createViewConfig(viewConfigProvider())\n        : viewConfig;\n\n      if (strict) {\n        const validationOutput = StaticViewConfigValidator.validate(\n          name,\n          nativeViewConfig,\n          staticViewConfig,\n        );\n\n        if (validationOutput.type === 'invalid') {\n          console.error(\n            StaticViewConfigValidator.stringifyValidationResult(\n              name,\n              validationOutput,\n            ),\n          );\n        }\n      } else {\n        verifyComponentAttributeEquivalence(nativeViewConfig, staticViewConfig);\n      }\n    }\n\n    return viewConfig;\n  });\n\n  // $FlowFixMe[incompatible-return] `NativeComponent` is actually string!\n  return name;\n}\n\n/**\n * Same as `NativeComponentRegistry.get(...)`, except this will check either\n * the `setRuntimeConfigProvider` configuration or use native reflection (slow)\n * to determine whether this native component is available.\n *\n * If the native component is not available, a stub component is returned. Note\n * that the return value of this is not `HostComponent` because the returned\n * component instance is not guaranteed to have native methods.\n */\nexport function getWithFallback_DEPRECATED<Config>(\n  name: string,\n  viewConfigProvider: () => PartialViewConfig,\n): React.AbstractComponent<Config> {\n  if (getRuntimeConfig == null) {\n    // `getRuntimeConfig == null` when static view configs are disabled\n    // If `setRuntimeConfigProvider` is not configured, use native reflection.\n    if (hasNativeViewConfig(name)) {\n      return get<Config>(name, viewConfigProvider);\n    }\n  } else {\n    // If there is no runtime config, then the native component is unavailable.\n    if (getRuntimeConfig(name) != null) {\n      return get<Config>(name, viewConfigProvider);\n    }\n  }\n\n  const FallbackNativeComponent = function (props: Config): React.Node {\n    return null;\n  };\n  FallbackNativeComponent.displayName = `Fallback(${name})`;\n  return FallbackNativeComponent;\n}\n\nfunction hasNativeViewConfig(name: string): boolean {\n  invariant(getRuntimeConfig == null, 'Unexpected invocation!');\n  return UIManager.getViewManagerConfig(name) != null;\n}\n\n/**\n * Unstable API. Do not use!\n *\n * This method returns if there is a StaticViewConfig registered for the\n * component name received as a parameter.\n */\nexport function unstable_hasStaticViewConfig(name: string): boolean {\n  const {native} = getRuntimeConfig?.(name) ?? {\n    native: true,\n  };\n  return !native;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}