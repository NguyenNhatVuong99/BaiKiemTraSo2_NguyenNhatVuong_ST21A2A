{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.PerformanceMeasure = exports.PerformanceMark = void 0;\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _warnOnce = _interopRequireDefault(require(\"../Utilities/warnOnce\"));\nvar _EventCounts = _interopRequireDefault(require(\"./EventCounts\"));\nvar _MemoryInfo = _interopRequireDefault(require(\"./MemoryInfo\"));\nvar _NativePerformance = _interopRequireDefault(require(\"./NativePerformance\"));\nvar _NativePerformanceObserver = _interopRequireDefault(require(\"./NativePerformanceObserver\"));\nvar _PerformanceEntry3 = require(\"./PerformanceEntry\");\nvar _PerformanceObserver = require(\"./PerformanceObserver\");\nvar _RawPerformanceEntry = require(\"./RawPerformanceEntry\");\nvar _ReactNativeStartupTiming = _interopRequireDefault(require(\"./ReactNativeStartupTiming\"));\nfunction _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nvar getCurrentTimeStamp = global.nativePerformanceNow ? global.nativePerformanceNow : function () {\n  return Date.now();\n};\nif (_NativePerformanceObserver.default != null && _NativePerformanceObserver.default.setIsBuffered) {\n  _NativePerformanceObserver.default == null ? void 0 : _NativePerformanceObserver.default.setIsBuffered(_PerformanceEntry3.ALWAYS_LOGGED_ENTRY_TYPES.map(_RawPerformanceEntry.performanceEntryTypeToRaw), true);\n}\nvar PerformanceMark = exports.PerformanceMark = function (_PerformanceEntry) {\n  (0, _inherits2.default)(PerformanceMark, _PerformanceEntry);\n  function PerformanceMark(markName, markOptions) {\n    var _markOptions$startTim;\n    var _this;\n    (0, _classCallCheck2.default)(this, PerformanceMark);\n    _this = _callSuper(this, PerformanceMark, [{\n      name: markName,\n      entryType: 'mark',\n      startTime: (_markOptions$startTim = markOptions == null ? void 0 : markOptions.startTime) != null ? _markOptions$startTim : getCurrentTimeStamp(),\n      duration: 0\n    }]);\n    if (markOptions) {\n      _this.detail = markOptions.detail;\n    }\n    return _this;\n  }\n  return (0, _createClass2.default)(PerformanceMark);\n}(_PerformanceEntry3.PerformanceEntry);\nvar PerformanceMeasure = exports.PerformanceMeasure = function (_PerformanceEntry2) {\n  (0, _inherits2.default)(PerformanceMeasure, _PerformanceEntry2);\n  function PerformanceMeasure(measureName, measureOptions) {\n    var _measureOptions$durat;\n    var _this2;\n    (0, _classCallCheck2.default)(this, PerformanceMeasure);\n    _this2 = _callSuper(this, PerformanceMeasure, [{\n      name: measureName,\n      entryType: 'measure',\n      startTime: 0,\n      duration: (_measureOptions$durat = measureOptions == null ? void 0 : measureOptions.duration) != null ? _measureOptions$durat : 0\n    }]);\n    if (measureOptions) {\n      _this2.detail = measureOptions.detail;\n    }\n    return _this2;\n  }\n  return (0, _createClass2.default)(PerformanceMeasure);\n}(_PerformanceEntry3.PerformanceEntry);\nfunction warnNoNativePerformance() {\n  (0, _warnOnce.default)('missing-native-performance', 'Missing native implementation of Performance');\n}\nvar Performance = exports.default = function () {\n  function Performance() {\n    (0, _classCallCheck2.default)(this, Performance);\n    this.eventCounts = new _EventCounts.default();\n  }\n  (0, _createClass2.default)(Performance, [{\n    key: \"memory\",\n    get: function get() {\n      if (_NativePerformance.default != null && _NativePerformance.default.getSimpleMemoryInfo) {\n        var memoryInfo = _NativePerformance.default.getSimpleMemoryInfo();\n        if (memoryInfo.hasOwnProperty('hermes_heapSize')) {\n          var totalJSHeapSize = memoryInfo.hermes_heapSize,\n            usedJSHeapSize = memoryInfo.hermes_allocatedBytes;\n          return new _MemoryInfo.default({\n            jsHeapSizeLimit: null,\n            totalJSHeapSize: totalJSHeapSize,\n            usedJSHeapSize: usedJSHeapSize\n          });\n        } else {\n          return new _MemoryInfo.default();\n        }\n      }\n      return new _MemoryInfo.default();\n    }\n  }, {\n    key: \"reactNativeStartupTiming\",\n    get: function get() {\n      if (_NativePerformance.default != null && _NativePerformance.default.getReactNativeStartupTiming) {\n        var _NativePerformance$ge = _NativePerformance.default.getReactNativeStartupTiming(),\n          startTime = _NativePerformance$ge.startTime,\n          endTime = _NativePerformance$ge.endTime,\n          initializeRuntimeStart = _NativePerformance$ge.initializeRuntimeStart,\n          initializeRuntimeEnd = _NativePerformance$ge.initializeRuntimeEnd,\n          executeJavaScriptBundleEntryPointStart = _NativePerformance$ge.executeJavaScriptBundleEntryPointStart,\n          executeJavaScriptBundleEntryPointEnd = _NativePerformance$ge.executeJavaScriptBundleEntryPointEnd;\n        return new _ReactNativeStartupTiming.default({\n          startTime: startTime,\n          endTime: endTime,\n          initializeRuntimeStart: initializeRuntimeStart,\n          initializeRuntimeEnd: initializeRuntimeEnd,\n          executeJavaScriptBundleEntryPointStart: executeJavaScriptBundleEntryPointStart,\n          executeJavaScriptBundleEntryPointEnd: executeJavaScriptBundleEntryPointEnd\n        });\n      }\n      return new _ReactNativeStartupTiming.default();\n    }\n  }, {\n    key: \"mark\",\n    value: function mark(markName, markOptions) {\n      var mark = new PerformanceMark(markName, markOptions);\n      if (_NativePerformance.default != null && _NativePerformance.default.mark) {\n        _NativePerformance.default.mark(markName, mark.startTime);\n      } else {\n        warnNoNativePerformance();\n      }\n      return mark;\n    }\n  }, {\n    key: \"clearMarks\",\n    value: function clearMarks(markName) {\n      if (!(_NativePerformanceObserver.default != null && _NativePerformanceObserver.default.clearEntries)) {\n        (0, _PerformanceObserver.warnNoNativePerformanceObserver)();\n        return;\n      }\n      _NativePerformanceObserver.default == null ? void 0 : _NativePerformanceObserver.default.clearEntries(_RawPerformanceEntry.RawPerformanceEntryTypeValues.MARK, markName);\n    }\n  }, {\n    key: \"measure\",\n    value: function measure(measureName, startMarkOrOptions, endMark) {\n      var options;\n      var startMarkName,\n        endMarkName = endMark,\n        duration,\n        startTime = 0,\n        endTime = 0;\n      if (typeof startMarkOrOptions === 'string') {\n        startMarkName = startMarkOrOptions;\n      } else if (startMarkOrOptions !== undefined) {\n        var _options$duration;\n        options = startMarkOrOptions;\n        if (endMark !== undefined) {\n          throw new TypeError(\"Performance.measure: Can't have both options and endMark\");\n        }\n        if (options.start === undefined && options.end === undefined) {\n          throw new TypeError('Performance.measure: Must have at least one of start/end specified in options');\n        }\n        if (options.start !== undefined && options.end !== undefined && options.duration !== undefined) {\n          throw new TypeError(\"Performance.measure: Can't have both start/end and duration explicitly in options\");\n        }\n        if (typeof options.start === 'number') {\n          startTime = options.start;\n        } else {\n          startMarkName = options.start;\n        }\n        if (typeof options.end === 'number') {\n          endTime = options.end;\n        } else {\n          endMarkName = options.end;\n        }\n        duration = (_options$duration = options.duration) != null ? _options$duration : duration;\n      }\n      var measure = new PerformanceMeasure(measureName, options);\n      if (_NativePerformance.default != null && _NativePerformance.default.measure) {\n        _NativePerformance.default.measure(measureName, startTime, endTime, duration, startMarkName, endMarkName);\n      } else {\n        warnNoNativePerformance();\n      }\n      return measure;\n    }\n  }, {\n    key: \"clearMeasures\",\n    value: function clearMeasures(measureName) {\n      if (!(_NativePerformanceObserver.default != null && _NativePerformanceObserver.default.clearEntries)) {\n        (0, _PerformanceObserver.warnNoNativePerformanceObserver)();\n        return;\n      }\n      _NativePerformanceObserver.default == null ? void 0 : _NativePerformanceObserver.default.clearEntries(_RawPerformanceEntry.RawPerformanceEntryTypeValues.MEASURE, measureName);\n    }\n  }, {\n    key: \"now\",\n    value: function now() {\n      return getCurrentTimeStamp();\n    }\n  }, {\n    key: \"getEntries\",\n    value: function getEntries() {\n      if (!(_NativePerformanceObserver.default != null && _NativePerformanceObserver.default.getEntries)) {\n        (0, _PerformanceObserver.warnNoNativePerformanceObserver)();\n        return [];\n      }\n      return _NativePerformanceObserver.default.getEntries().map(_RawPerformanceEntry.rawToPerformanceEntry);\n    }\n  }, {\n    key: \"getEntriesByType\",\n    value: function getEntriesByType(entryType) {\n      if (!_PerformanceEntry3.ALWAYS_LOGGED_ENTRY_TYPES.includes(entryType)) {\n        console.warn(`Performance.getEntriesByType: Only valid for ${JSON.stringify(_PerformanceEntry3.ALWAYS_LOGGED_ENTRY_TYPES)} entry types, got ${entryType}`);\n        return [];\n      }\n      if (!(_NativePerformanceObserver.default != null && _NativePerformanceObserver.default.getEntries)) {\n        (0, _PerformanceObserver.warnNoNativePerformanceObserver)();\n        return [];\n      }\n      return _NativePerformanceObserver.default.getEntries((0, _RawPerformanceEntry.performanceEntryTypeToRaw)(entryType)).map(_RawPerformanceEntry.rawToPerformanceEntry);\n    }\n  }, {\n    key: \"getEntriesByName\",\n    value: function getEntriesByName(entryName, entryType) {\n      if (entryType !== undefined && !_PerformanceEntry3.ALWAYS_LOGGED_ENTRY_TYPES.includes(entryType)) {\n        console.warn(`Performance.getEntriesByName: Only valid for ${JSON.stringify(_PerformanceEntry3.ALWAYS_LOGGED_ENTRY_TYPES)} entry types, got ${entryType}`);\n        return [];\n      }\n      if (!(_NativePerformanceObserver.default != null && _NativePerformanceObserver.default.getEntries)) {\n        (0, _PerformanceObserver.warnNoNativePerformanceObserver)();\n        return [];\n      }\n      return _NativePerformanceObserver.default.getEntries(entryType != null ? (0, _RawPerformanceEntry.performanceEntryTypeToRaw)(entryType) : undefined, entryName).map(_RawPerformanceEntry.rawToPerformanceEntry);\n    }\n  }]);\n  return Performance;\n}();","map":{"version":3,"names":["_warnOnce","_interopRequireDefault","require","_EventCounts","_MemoryInfo","_NativePerformance","_NativePerformanceObserver","_PerformanceEntry3","_PerformanceObserver","_RawPerformanceEntry","_ReactNativeStartupTiming","_callSuper","t","o","e","_getPrototypeOf2","default","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","call","getCurrentTimeStamp","global","nativePerformanceNow","Date","now","NativePerformanceObserver","setIsBuffered","ALWAYS_LOGGED_ENTRY_TYPES","map","performanceEntryTypeToRaw","PerformanceMark","exports","_PerformanceEntry","_inherits2","markName","markOptions","_markOptions$startTim","_this","_classCallCheck2","name","entryType","startTime","duration","detail","_createClass2","PerformanceEntry","PerformanceMeasure","_PerformanceEntry2","measureName","measureOptions","_measureOptions$durat","_this2","warnNoNativePerformance","warnOnce","Performance","eventCounts","EventCounts","key","get","NativePerformance","getSimpleMemoryInfo","memoryInfo","hasOwnProperty","totalJSHeapSize","hermes_heapSize","usedJSHeapSize","hermes_allocatedBytes","MemoryInfo","jsHeapSizeLimit","getReactNativeStartupTiming","_NativePerformance$ge","endTime","initializeRuntimeStart","initializeRuntimeEnd","executeJavaScriptBundleEntryPointStart","executeJavaScriptBundleEntryPointEnd","ReactNativeStartupTiming","value","mark","clearMarks","clearEntries","warnNoNativePerformanceObserver","RawPerformanceEntryTypeValues","MARK","measure","startMarkOrOptions","endMark","options","startMarkName","endMarkName","undefined","_options$duration","TypeError","start","end","clearMeasures","MEASURE","getEntries","rawToPerformanceEntry","getEntriesByType","includes","console","warn","JSON","stringify","getEntriesByName","entryName"],"sources":["D:/IT/react native/crud_project/node_modules/react-native/Libraries/WebPerformance/Performance.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n// flowlint unsafe-getters-setters:off\n\nimport type {HighResTimeStamp, PerformanceEntryType} from './PerformanceEntry';\nimport type {PerformanceEntryList} from './PerformanceObserver';\n\nimport warnOnce from '../Utilities/warnOnce';\nimport EventCounts from './EventCounts';\nimport MemoryInfo from './MemoryInfo';\nimport NativePerformance from './NativePerformance';\nimport NativePerformanceObserver from './NativePerformanceObserver';\nimport {ALWAYS_LOGGED_ENTRY_TYPES, PerformanceEntry} from './PerformanceEntry';\nimport {warnNoNativePerformanceObserver} from './PerformanceObserver';\nimport {\n  performanceEntryTypeToRaw,\n  rawToPerformanceEntry,\n} from './RawPerformanceEntry';\nimport {RawPerformanceEntryTypeValues} from './RawPerformanceEntry';\nimport ReactNativeStartupTiming from './ReactNativeStartupTiming';\n\ntype DetailType = mixed;\n\nexport type PerformanceMarkOptions = {\n  detail?: DetailType,\n  startTime?: HighResTimeStamp,\n};\n\ndeclare var global: {\n  // This value is defined directly via JSI, if available.\n  +nativePerformanceNow?: ?() => number,\n};\n\nconst getCurrentTimeStamp: () => HighResTimeStamp = global.nativePerformanceNow\n  ? global.nativePerformanceNow\n  : () => Date.now();\n\n// We want some of the performance entry types to be always logged,\n// even if they are not currently observed - this is either to be able to\n// retrieve them at any time via Performance.getEntries* or to refer by other entries\n// (such as when measures may refer to marks, even if the latter are not observed)\nif (NativePerformanceObserver?.setIsBuffered) {\n  NativePerformanceObserver?.setIsBuffered(\n    ALWAYS_LOGGED_ENTRY_TYPES.map(performanceEntryTypeToRaw),\n    true,\n  );\n}\n\nexport class PerformanceMark extends PerformanceEntry {\n  detail: DetailType;\n\n  constructor(markName: string, markOptions?: PerformanceMarkOptions) {\n    super({\n      name: markName,\n      entryType: 'mark',\n      startTime: markOptions?.startTime ?? getCurrentTimeStamp(),\n      duration: 0,\n    });\n\n    if (markOptions) {\n      this.detail = markOptions.detail;\n    }\n  }\n}\n\nexport type TimeStampOrName = HighResTimeStamp | string;\n\nexport type PerformanceMeasureOptions = {\n  detail?: DetailType,\n  start?: TimeStampOrName,\n  end?: TimeStampOrName,\n  duration?: HighResTimeStamp,\n};\n\nexport class PerformanceMeasure extends PerformanceEntry {\n  detail: DetailType;\n\n  constructor(measureName: string, measureOptions?: PerformanceMeasureOptions) {\n    super({\n      name: measureName,\n      entryType: 'measure',\n      startTime: 0,\n      duration: measureOptions?.duration ?? 0,\n    });\n\n    if (measureOptions) {\n      this.detail = measureOptions.detail;\n    }\n  }\n}\n\nfunction warnNoNativePerformance() {\n  warnOnce(\n    'missing-native-performance',\n    'Missing native implementation of Performance',\n  );\n}\n\n/**\n * Partial implementation of the Performance interface for RN,\n * corresponding to the standard in\n * https://www.w3.org/TR/user-timing/#extensions-performance-interface\n */\nexport default class Performance {\n  eventCounts: EventCounts = new EventCounts();\n\n  // Get the current JS memory information.\n  get memory(): MemoryInfo {\n    if (NativePerformance?.getSimpleMemoryInfo) {\n      // JSI API implementations may have different variants of names for the JS\n      // heap information we need here. We will parse the result based on our\n      // guess of the implementation for now.\n      const memoryInfo = NativePerformance.getSimpleMemoryInfo();\n      if (memoryInfo.hasOwnProperty('hermes_heapSize')) {\n        // We got memory information from Hermes\n        const {\n          hermes_heapSize: totalJSHeapSize,\n          hermes_allocatedBytes: usedJSHeapSize,\n        } = memoryInfo;\n\n        return new MemoryInfo({\n          jsHeapSizeLimit: null, // We don't know the heap size limit from Hermes.\n          totalJSHeapSize,\n          usedJSHeapSize,\n        });\n      } else {\n        // JSC and V8 has no native implementations for memory information in JSI::Instrumentation\n        return new MemoryInfo();\n      }\n    }\n\n    return new MemoryInfo();\n  }\n\n  // Startup metrics is not used in web, but only in React Native.\n  get reactNativeStartupTiming(): ReactNativeStartupTiming {\n    if (NativePerformance?.getReactNativeStartupTiming) {\n      const {\n        startTime,\n        endTime,\n        initializeRuntimeStart,\n        initializeRuntimeEnd,\n        executeJavaScriptBundleEntryPointStart,\n        executeJavaScriptBundleEntryPointEnd,\n      } = NativePerformance.getReactNativeStartupTiming();\n      return new ReactNativeStartupTiming({\n        startTime,\n        endTime,\n        initializeRuntimeStart,\n        initializeRuntimeEnd,\n        executeJavaScriptBundleEntryPointStart,\n        executeJavaScriptBundleEntryPointEnd,\n      });\n    }\n    return new ReactNativeStartupTiming();\n  }\n\n  mark(\n    markName: string,\n    markOptions?: PerformanceMarkOptions,\n  ): PerformanceMark {\n    const mark = new PerformanceMark(markName, markOptions);\n\n    if (NativePerformance?.mark) {\n      NativePerformance.mark(markName, mark.startTime);\n    } else {\n      warnNoNativePerformance();\n    }\n\n    return mark;\n  }\n\n  clearMarks(markName?: string): void {\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return;\n    }\n\n    NativePerformanceObserver?.clearEntries(\n      RawPerformanceEntryTypeValues.MARK,\n      markName,\n    );\n  }\n\n  measure(\n    measureName: string,\n    startMarkOrOptions?: string | PerformanceMeasureOptions,\n    endMark?: string,\n  ): PerformanceMeasure {\n    let options;\n    let startMarkName,\n      endMarkName = endMark,\n      duration,\n      startTime = 0,\n      endTime = 0;\n\n    if (typeof startMarkOrOptions === 'string') {\n      startMarkName = startMarkOrOptions;\n    } else if (startMarkOrOptions !== undefined) {\n      options = startMarkOrOptions;\n      if (endMark !== undefined) {\n        throw new TypeError(\n          \"Performance.measure: Can't have both options and endMark\",\n        );\n      }\n      if (options.start === undefined && options.end === undefined) {\n        throw new TypeError(\n          'Performance.measure: Must have at least one of start/end specified in options',\n        );\n      }\n      if (\n        options.start !== undefined &&\n        options.end !== undefined &&\n        options.duration !== undefined\n      ) {\n        throw new TypeError(\n          \"Performance.measure: Can't have both start/end and duration explicitly in options\",\n        );\n      }\n\n      if (typeof options.start === 'number') {\n        startTime = options.start;\n      } else {\n        startMarkName = options.start;\n      }\n\n      if (typeof options.end === 'number') {\n        endTime = options.end;\n      } else {\n        endMarkName = options.end;\n      }\n\n      duration = options.duration ?? duration;\n    }\n\n    const measure = new PerformanceMeasure(measureName, options);\n\n    if (NativePerformance?.measure) {\n      NativePerformance.measure(\n        measureName,\n        startTime,\n        endTime,\n        duration,\n        startMarkName,\n        endMarkName,\n      );\n    } else {\n      warnNoNativePerformance();\n    }\n\n    return measure;\n  }\n\n  clearMeasures(measureName?: string): void {\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return;\n    }\n\n    NativePerformanceObserver?.clearEntries(\n      RawPerformanceEntryTypeValues.MEASURE,\n      measureName,\n    );\n  }\n\n  /**\n   * Returns a double, measured in milliseconds.\n   * https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\n   */\n  now(): HighResTimeStamp {\n    return getCurrentTimeStamp();\n  }\n\n  /**\n   * An extension that allows to get back to JS all currently logged marks/measures\n   * (in our case, be it from JS or native), see\n   * https://www.w3.org/TR/performance-timeline/#extensions-to-the-performance-interface\n   */\n  getEntries(): PerformanceEntryList {\n    if (!NativePerformanceObserver?.getEntries) {\n      warnNoNativePerformanceObserver();\n      return [];\n    }\n    return NativePerformanceObserver.getEntries().map(rawToPerformanceEntry);\n  }\n\n  getEntriesByType(entryType: PerformanceEntryType): PerformanceEntryList {\n    if (!ALWAYS_LOGGED_ENTRY_TYPES.includes(entryType)) {\n      console.warn(\n        `Performance.getEntriesByType: Only valid for ${JSON.stringify(\n          ALWAYS_LOGGED_ENTRY_TYPES,\n        )} entry types, got ${entryType}`,\n      );\n      return [];\n    }\n\n    if (!NativePerformanceObserver?.getEntries) {\n      warnNoNativePerformanceObserver();\n      return [];\n    }\n    return NativePerformanceObserver.getEntries(\n      performanceEntryTypeToRaw(entryType),\n    ).map(rawToPerformanceEntry);\n  }\n\n  getEntriesByName(\n    entryName: string,\n    entryType?: PerformanceEntryType,\n  ): PerformanceEntryList {\n    if (\n      entryType !== undefined &&\n      !ALWAYS_LOGGED_ENTRY_TYPES.includes(entryType)\n    ) {\n      console.warn(\n        `Performance.getEntriesByName: Only valid for ${JSON.stringify(\n          ALWAYS_LOGGED_ENTRY_TYPES,\n        )} entry types, got ${entryType}`,\n      );\n      return [];\n    }\n\n    if (!NativePerformanceObserver?.getEntries) {\n      warnNoNativePerformanceObserver();\n      return [];\n    }\n    return NativePerformanceObserver.getEntries(\n      entryType != null ? performanceEntryTypeToRaw(entryType) : undefined,\n      entryName,\n    ).map(rawToPerformanceEntry);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}